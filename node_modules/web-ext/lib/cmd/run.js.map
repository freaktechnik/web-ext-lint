{"version":3,"file":"run.js","names":["path","fs","nodeFs","defaultBuildExtension","showDesktopNotification","defaultDesktopNotifications","defaultFirefoxApp","connectWithMaxRetries","defaultFirefoxClient","createLogger","defaultGetValidatedManifest","UsageError","createExtensionRunner","defaultReloadStrategy","MultiExtensionRunner","DefaultMultiExtensionRunner","log","import","meta","url","run","artifactsDir","browserConsole","devtools","pref","firefox","firefoxProfile","profileCreateIfMissing","keepProfileChanges","ignoreFiles","noInput","noReload","preInstall","sourceDir","verbose","watchFile","watchIgnored","startUrl","target","args","adbBin","adbHost","adbPort","adbDevice","adbDiscoveryTimeout","adbRemoveOldArtifacts","firefoxApk","firefoxApkComponent","chromiumBinary","chromiumProfile","buildExtension","desktopNotifications","firefoxApp","firefoxClient","reloadStrategy","getValidatedManifest","resolve","info","Array","isArray","every","el","customPrefs","manifestData","profileDir","isDir","existsSync","mkdir","runners","commonRunnerParams","extensions","length","includes","firefoxDesktopRunnerParams","firefoxBinary","profilePath","firefoxDesktopRunner","params","push","firefoxAndroidRunnerParams","buildSourceDir","extensionSourceDir","tmpArtifactsDir","asNeeded","showReadyMessage","firefoxAndroidRunner","chromiumRunnerParams","chromiumRunner","extensionRunner"],"sources":["../../src/cmd/run.js"],"sourcesContent":["import path from 'path';\nimport fs from 'fs/promises';\nimport nodeFs from 'fs';\n\nimport defaultBuildExtension from './build.js';\nimport { showDesktopNotification as defaultDesktopNotifications } from '../util/desktop-notifier.js';\nimport * as defaultFirefoxApp from '../firefox/index.js';\nimport { connectWithMaxRetries as defaultFirefoxClient } from '../firefox/remote.js';\nimport { createLogger } from '../util/logger.js';\nimport defaultGetValidatedManifest from '../util/manifest.js';\nimport { UsageError } from '../errors.js';\nimport {\n  createExtensionRunner,\n  defaultReloadStrategy,\n  MultiExtensionRunner as DefaultMultiExtensionRunner,\n} from '../extension-runners/index.js';\n\nconst log = createLogger(import.meta.url);\n\n// Run command types and implementation.\n\nexport default async function run(\n  {\n    artifactsDir,\n    browserConsole = false,\n    devtools = false,\n    pref,\n    firefox,\n    firefoxProfile,\n    profileCreateIfMissing,\n    keepProfileChanges = false,\n    ignoreFiles,\n    noInput = false,\n    noReload = false,\n    preInstall = false,\n    sourceDir,\n    verbose = false,\n    watchFile,\n    watchIgnored,\n    startUrl,\n    target,\n    args,\n    // Android CLI options.\n    adbBin,\n    adbHost,\n    adbPort,\n    adbDevice,\n    adbDiscoveryTimeout,\n    adbRemoveOldArtifacts,\n    firefoxApk,\n    firefoxApkComponent,\n    // Chromium CLI options.\n    chromiumBinary,\n    chromiumProfile,\n  },\n  {\n    buildExtension = defaultBuildExtension,\n    desktopNotifications = defaultDesktopNotifications,\n    firefoxApp = defaultFirefoxApp,\n    firefoxClient = defaultFirefoxClient,\n    reloadStrategy = defaultReloadStrategy,\n    MultiExtensionRunner = DefaultMultiExtensionRunner,\n    getValidatedManifest = defaultGetValidatedManifest,\n  } = {},\n) {\n  sourceDir = path.resolve(sourceDir);\n  log.info(`Running web extension from ${sourceDir}`);\n  if (preInstall) {\n    log.info(\n      \"Disabled auto-reloading because it's not possible with \" +\n        '--pre-install',\n    );\n    noReload = true;\n  }\n\n  if (\n    watchFile != null &&\n    (!Array.isArray(watchFile) ||\n      !watchFile.every((el) => typeof el === 'string'))\n  ) {\n    throw new UsageError('Unexpected watchFile type');\n  }\n\n  // Create an alias for --pref since it has been transformed into an\n  // object containing one or more preferences.\n  const customPrefs = pref;\n  const manifestData = await getValidatedManifest(sourceDir);\n\n  const profileDir = firefoxProfile || chromiumProfile;\n\n  if (profileCreateIfMissing) {\n    if (!profileDir) {\n      throw new UsageError(\n        '--profile-create-if-missing requires ' +\n          '--firefox-profile or --chromium-profile',\n      );\n    }\n    const isDir = nodeFs.existsSync(profileDir);\n    if (isDir) {\n      log.info(`Profile directory ${profileDir} already exists`);\n    } else {\n      log.info(`Profile directory not found. Creating directory ${profileDir}`);\n      await fs.mkdir(profileDir);\n    }\n  }\n\n  const runners = [];\n\n  const commonRunnerParams = {\n    // Common options.\n    extensions: [{ sourceDir, manifestData }],\n    keepProfileChanges,\n    startUrl,\n    args,\n    desktopNotifications,\n  };\n\n  if (!target || target.length === 0 || target.includes('firefox-desktop')) {\n    const firefoxDesktopRunnerParams = {\n      ...commonRunnerParams,\n\n      // Firefox specific CLI options.\n      firefoxBinary: firefox,\n      profilePath: firefoxProfile,\n      customPrefs,\n      browserConsole,\n      devtools,\n      preInstall,\n\n      // Firefox runner injected dependencies.\n      firefoxApp,\n      firefoxClient,\n    };\n\n    const firefoxDesktopRunner = await createExtensionRunner({\n      target: 'firefox-desktop',\n      params: firefoxDesktopRunnerParams,\n    });\n    runners.push(firefoxDesktopRunner);\n  }\n\n  if (target && target.includes('firefox-android')) {\n    const firefoxAndroidRunnerParams = {\n      ...commonRunnerParams,\n\n      // Firefox specific CLI options.\n      profilePath: firefoxProfile,\n      customPrefs,\n      browserConsole,\n      preInstall,\n      firefoxApk,\n      firefoxApkComponent,\n      adbDevice,\n      adbHost,\n      adbPort,\n      adbBin,\n      adbDiscoveryTimeout,\n      adbRemoveOldArtifacts,\n\n      // Injected dependencies.\n      firefoxApp,\n      firefoxClient,\n      desktopNotifications: defaultDesktopNotifications,\n      buildSourceDir: (extensionSourceDir, tmpArtifactsDir) => {\n        return buildExtension(\n          {\n            sourceDir: extensionSourceDir,\n            ignoreFiles,\n            asNeeded: false,\n            // Use a separate temporary directory for building the extension zip file\n            // that we are going to upload on the android device.\n            artifactsDir: tmpArtifactsDir,\n          },\n          {\n            // Suppress the message usually logged by web-ext build.\n            showReadyMessage: false,\n          },\n        );\n      },\n    };\n\n    const firefoxAndroidRunner = await createExtensionRunner({\n      target: 'firefox-android',\n      params: firefoxAndroidRunnerParams,\n    });\n    runners.push(firefoxAndroidRunner);\n  }\n\n  if (target && target.includes('chromium')) {\n    const chromiumRunnerParams = {\n      ...commonRunnerParams,\n      verbose,\n      chromiumBinary,\n      chromiumProfile,\n    };\n\n    const chromiumRunner = await createExtensionRunner({\n      target: 'chromium',\n      params: chromiumRunnerParams,\n    });\n    runners.push(chromiumRunner);\n  }\n\n  const extensionRunner = new MultiExtensionRunner({\n    desktopNotifications,\n    runners,\n  });\n\n  await extensionRunner.run();\n\n  if (noReload) {\n    log.info('Automatic extension reloading has been disabled');\n  } else {\n    log.info('The extension will reload if any source file changes');\n\n    reloadStrategy({\n      extensionRunner,\n      sourceDir,\n      watchFile,\n      watchIgnored,\n      artifactsDir,\n      ignoreFiles,\n      noInput,\n    });\n  }\n\n  return extensionRunner;\n}\n"],"mappings":"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","ignoreList":[]}